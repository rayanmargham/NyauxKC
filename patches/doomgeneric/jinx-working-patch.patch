diff -urN --no-dereference doomgeneric-clean/doomgeneric/Makefile doomgeneric-workdir/doomgeneric/Makefile
--- doomgeneric-clean/doomgeneric/Makefile
+++ doomgeneric-workdir/doomgeneric/Makefile
@@ -12,17 +12,17 @@
 endif
 
 
-CC=clang  # gcc or g++
+CC=x86_64-nyaux-mlibc-gcc
 CFLAGS+=-ggdb3 -Os
 LDFLAGS+=-Wl,--gc-sections
-CFLAGS+=-ggdb3 -Wall -DNORMALUNIX -DLINUX -DSNDSERV -D_DEFAULT_SOURCE # -DUSEASM
-LIBS+=-lm -lc -lX11
+CFLAGS+=-ggdb3 --warn-no-implicit-function-declaration -DNORMALUNIX -DLINUX -DSNDSERV -D_DEFAULT_SOURCE # -DUSEASM
+LIBS+=-lm -lc
 
 # subdirectory for objects
 OBJDIR=build
 OUTPUT=doomgeneric
 
-SRC_DOOM = i_main.o dummy.o am_map.o doomdef.o doomstat.o dstrings.o d_event.o d_items.o d_iwad.o d_loop.o d_main.o d_mode.o d_net.o f_finale.o f_wipe.o g_game.o hu_lib.o hu_stuff.o info.o i_cdmus.o i_endoom.o i_joystick.o i_scale.o i_sound.o i_system.o i_timer.o memio.o m_argv.o m_bbox.o m_cheat.o m_config.o m_controls.o m_fixed.o m_menu.o m_misc.o m_random.o p_ceilng.o p_doors.o p_enemy.o p_floor.o p_inter.o p_lights.o p_map.o p_maputl.o p_mobj.o p_plats.o p_pspr.o p_saveg.o p_setup.o p_sight.o p_spec.o p_switch.o p_telept.o p_tick.o p_user.o r_bsp.o r_data.o r_draw.o r_main.o r_plane.o r_segs.o r_sky.o r_things.o sha1.o sounds.o statdump.o st_lib.o st_stuff.o s_sound.o tables.o v_video.o wi_stuff.o w_checksum.o w_file.o w_main.o w_wad.o z_zone.o w_file_stdc.o i_input.o i_video.o doomgeneric.o doomgeneric_xlib.o
+SRC_DOOM = i_main.o dummy.o am_map.o doomdef.o doomstat.o dstrings.o d_event.o d_items.o d_iwad.o d_loop.o d_main.o d_mode.o d_net.o f_finale.o f_wipe.o g_game.o hu_lib.o hu_stuff.o info.o i_cdmus.o i_endoom.o i_joystick.o i_scale.o i_sound.o i_system.o i_timer.o memio.o m_argv.o m_bbox.o m_cheat.o m_config.o m_controls.o m_fixed.o m_menu.o m_misc.o m_random.o p_ceilng.o p_doors.o p_enemy.o p_floor.o p_inter.o p_lights.o p_map.o p_maputl.o p_mobj.o p_plats.o p_pspr.o p_saveg.o p_setup.o p_sight.o p_spec.o p_switch.o p_telept.o p_tick.o p_user.o r_bsp.o r_data.o r_draw.o r_main.o r_plane.o r_segs.o r_sky.o r_things.o sha1.o sounds.o statdump.o st_lib.o st_stuff.o s_sound.o tables.o v_video.o wi_stuff.o w_checksum.o w_file.o w_main.o w_wad.o z_zone.o w_file_stdc.o i_input.o i_video.o doomgeneric.o doomgeneric_nyaux.o
 OBJS += $(addprefix $(OBJDIR)/, $(SRC_DOOM))
 
 all:	 $(OUTPUT)
@@ -37,8 +37,6 @@
 	@echo [Linking $@]
 	$(VB)$(CC) $(CFLAGS) $(LDFLAGS) $(OBJS) \
 	-o $(OUTPUT) $(LIBS) -Wl,-Map,$(OUTPUT).map
-	@echo [Size]
-	-$(CROSS_COMPILE)size $(OUTPUT)
 
 $(OBJS): | $(OBJDIR)
 
diff -urN --no-dereference doomgeneric-clean/doomgeneric/Makefile.x11 doomgeneric-workdir/doomgeneric/Makefile.x11
--- doomgeneric-clean/doomgeneric/Makefile.x11	1970-01-01 01:00:00.000000000 +0100
+++ doomgeneric-workdir/doomgeneric/Makefile.x11
@@ -0,0 +1,54 @@
+################################################################
+#
+# $Id:$
+#
+# $Log:$
+#
+
+ifeq ($(V),1)
+	VB=''
+else
+	VB=@
+endif
+
+
+CC=x86_64-nyaux-mlibc-gcc
+CFLAGS+=-ggdb3 -Os
+LDFLAGS+=-Wl,--gc-sections
+CFLAGS+=-ggdb3 -Wall -DNORMALUNIX -DLINUX -DSNDSERV -D_DEFAULT_SOURCE # -DUSEASM
+LIBS+=-lm -lc -lX11
+
+# subdirectory for objects
+OBJDIR=build
+OUTPUT=doomgeneric
+
+SRC_DOOM = i_main.o dummy.o am_map.o doomdef.o doomstat.o dstrings.o d_event.o d_items.o d_iwad.o d_loop.o d_main.o d_mode.o d_net.o f_finale.o f_wipe.o g_game.o hu_lib.o hu_stuff.o info.o i_cdmus.o i_endoom.o i_joystick.o i_scale.o i_sound.o i_system.o i_timer.o memio.o m_argv.o m_bbox.o m_cheat.o m_config.o m_controls.o m_fixed.o m_menu.o m_misc.o m_random.o p_ceilng.o p_doors.o p_enemy.o p_floor.o p_inter.o p_lights.o p_map.o p_maputl.o p_mobj.o p_plats.o p_pspr.o p_saveg.o p_setup.o p_sight.o p_spec.o p_switch.o p_telept.o p_tick.o p_user.o r_bsp.o r_data.o r_draw.o r_main.o r_plane.o r_segs.o r_sky.o r_things.o sha1.o sounds.o statdump.o st_lib.o st_stuff.o s_sound.o tables.o v_video.o wi_stuff.o w_checksum.o w_file.o w_main.o w_wad.o z_zone.o w_file_stdc.o i_input.o i_video.o doomgeneric.o doomgeneric_xlib.o
+OBJS += $(addprefix $(OBJDIR)/, $(SRC_DOOM))
+
+all:	 $(OUTPUT)
+
+clean:
+	rm -rf $(OBJDIR)
+	rm -f $(OUTPUT)
+	rm -f $(OUTPUT).gdb
+	rm -f $(OUTPUT).map
+
+$(OUTPUT):	$(OBJS)
+	@echo [Linking $@]
+	$(VB)$(CC) $(CFLAGS) $(LDFLAGS) $(OBJS) \
+	-o $(OUTPUT) $(LIBS) -Wl,-Map,$(OUTPUT).map
+	@echo [Size]
+	-$(CROSS_COMPILE)size $(OUTPUT)
+
+$(OBJS): | $(OBJDIR)
+
+$(OBJDIR):
+	mkdir -p $(OBJDIR)
+
+$(OBJDIR)/%.o:	%.c
+	@echo [Compiling $<]
+	$(VB)$(CC) $(CFLAGS) -c $< -o $@
+
+print:
+	@echo OBJS: $(OBJS)
+
diff -urN --no-dereference doomgeneric-clean/doomgeneric/d_main.c doomgeneric-workdir/doomgeneric/d_main.c
--- doomgeneric-clean/doomgeneric/d_main.c
+++ doomgeneric-workdir/doomgeneric/d_main.c
@@ -1367,10 +1367,11 @@
 
     if (iwadfile == NULL)
     {
+        
         I_Error("Game mode indeterminate.  No IWAD file was found.  Try\n"
                 "specifying one with the '-iwad' command line parameter.\n");
     }
-
+    
     modifiedgame = false;
 
     DEH_printf("W_Init: Init WADfiles.\n");
diff -urN --no-dereference doomgeneric-clean/doomgeneric/doomgeneric_nyaux.c doomgeneric-workdir/doomgeneric/doomgeneric_nyaux.c
--- doomgeneric-clean/doomgeneric/doomgeneric_nyaux.c	1970-01-01 01:00:00.000000000 +0100
+++ doomgeneric-workdir/doomgeneric/doomgeneric_nyaux.c
@@ -0,0 +1,389 @@
+#include "doomkeys.h"
+
+#include "doomgeneric.h"
+
+#include <ctype.h>
+#include <errno.h>
+#include <fcntl.h>
+#include <linux/fb.h>
+#include <stdio.h>
+#include <string.h>
+#include <sys/ioctl.h>
+#include <sys/time.h>
+#include <termios.h>
+#include <unistd.h>
+
+static int fbfd;
+static int kbfd;
+static struct fb_var_screeninfo fbvs;
+static struct fb_fix_screeninfo fbfs;
+static void *frame;
+static struct termios ttysave;
+
+static struct timespec starttime;
+
+static int seekordie(int fd, off_t offset, int whence) {
+  int ret = lseek(fd, offset, whence);
+  if (ret == -1) {
+    printf("doomgeneric: lseek failed on fd %d: %s", fd, strerror(errno));
+    exit(errno);
+  }
+  return ret;
+}
+
+static int ioctlordie(int fd, unsigned long request, void *arg) {
+  int ret = ioctl(fd, request, arg);
+  if (ret == -1) {
+    printf("doomgeneric: ioctl failed on fd %d: %s\n", fd, strerror(errno));
+    exit(errno);
+  }
+  return ret;
+}
+
+static int openordie(char *name, int flags, int mode) {
+  int fd = open(name, flags, mode);
+  if (fd == -1) {
+    printf("doomgeneric: failed to open %s: %s\n", name, strerror(errno));
+    exit(errno);
+  }
+  return fd;
+}
+
+static int writeordie(int fd, void *buff, size_t count) {
+  int writec = write(fd, buff, count);
+  if (writec == -1) {
+    printf("doomgeneric: write failed on fd %d: %s\n", fd, strerror(errno));
+    exit(errno);
+  }
+
+  return writec;
+}
+
+static int readordie(int fd, void *buff, size_t count) {
+  int readc = read(fd, buff, count);
+  if (readc == -1) {
+    printf("doomgeneric: read failed on fd %d: %s\n", fd, strerror(errno));
+    exit(errno);
+  }
+  return readc;
+}
+// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⡅⠀⢸⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀
+// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢺⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣾⣿⣿⣷⣷⣟⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀
+// ⠀⠀⠀⠀⠀⠀⠀⣴⣦⣤⣤⣤⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⣤⣤⣴⡄⠀⠀⠀⠀⠀⠀⠀
+// ⠀⠀⠀⠀⠠⣤⣄⣺⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⣤⣄⠀⠀⠀⠀⠀
+// ⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀
+// ⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀
+// ⠀⠀⢸⣷⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⡆⠀⠀
+// ⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀
+// ⣤⣀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⣄⣀
+// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
+// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣝⣻⣿⣿⣿⣿⣿⢯⣛⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
+// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡽⣺⢽⡻⣿⣿⣿⣯⡝⣯⢟⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
+// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣿⢷⣏⢷⡻⣽⢿⡻⣗⣻⡼⣫⣞⢿⢿⣻⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
+// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⣾⡿⠓⠚⠛⠓⠛⠚⠛⠚⠓⠛⠓⠞⠛⠚⠳⠛⠛⠛⠛⠟⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
+// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠽⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠹⠷⢯⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
+// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
+// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
+// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣶⠀⠀⠈⠉⠉⠉⠉⠉⠋⠉⠉⠉⠁⠀⠀⠀⢀⣶⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
+// ⠛⢻⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣤⣤⣤⣤⣤⣤⣧⡄⠀⠀⠀⠀⣧⣤⣤⣤⣤⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
+// ⠀⠘⢸⣿⣿⠿⠿⢿⣿⣿⠿⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⡿⠿⠿⣿⣿⡿⠿⠿⣿⣿⡿⠿⠿
+// ⠀⠀⢸⣿⣿⣖⠂⢸⣿⣿⠀⡀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⣿⣿⡷⠀⠀⣿⣿⡿⡇⠀
+// ⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀
+// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣶⣾⠉⠉⠉⠉⢹⣿⣿⣿⣿⣷⣶⣶⣶⣶⣿⣿⣿⣿⣿⡉⠉⠉⠉⠉⣷⣶⣶⠀⠀⠀⠀⠀⠀⠀
+// ⠀⠀⠀⠀⠀⠀⠀⣠⣄⣔⣿⠿⢯⠀⠀⠀⠀⠺⠿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⠿⠇⠀⠀⠀⠀⠿⠿⢿⣄⣄⡀⠀⠀⠀⠀
+// ⠀⠀⠀⠀⠀⠀⠰⢿⣿⣿⠋⣄⢀⣀⡀⠀⠀⠀⠀⠰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀⢀⣀⣀⣀⢸⣿⣿⠇⠀⠀⠀⠀
+// ⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⠀⠀⠀⠀⠻⣆⠀⠀⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠀⠀⣠⠀⠀⠀⠀⢸⣿⣿⠀⠀⠀⠀⠀
+// ⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⢆⠀⠀⠀⠀⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠋⠑⠀⠀⠀⠀⣼⣿⣿⡁⠀⠀⠀⠀
+// ⠀⠀⠀⠀⠀⣶⣼⣿⡟⠛⠀⠀⣰⣶⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣶⣦⠀⠀⠘⠛⠛⣷⣴⡄⠀⠀
+// ⠀⠀⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⢸⣯⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡿⣽⡀⠀⠠⠄⠀⣿⣿⡇⠀⠀
+// ⠀⠀⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⢹⣷⣿⠀⠀⠀⠀⠀⡀⠀⢀⣀⡀⣀⡀⢀⠀⠀⠀⢀⠀⠀⢸⣿⣽⠂⠀⠀⠀⠀⣿⣿⡇⠀⠀
+// ⠀⠀⠀⠀⠀⣿⣿⣇⠀⠀⠀⠀⢸⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⢸⣿⣿⠀⠀⠀⠀⠀⣿⣿⡇⠀⠀
+// ⠀⠀⠀⠀⠀⣿⣿⣿⡄⠀⠀⠀⢼⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⡀⠀⠀⠀⠀⣿⣿⡇⠀⠀
+// ⠀⠀⠀⠀⠀⣿⣿⣿⣷⣶⣶⣦⣾⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣷⣶⣴⣶⣼⣿⣿⡇⠀⠀
+// ⠀⠀⠀⠀⠀⣿⣿⡿⠿⠿⠿⠿⠿⠿⢿⣤⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣤⣤⣿⠿⠿⠿⠿⠿⠿⠿⣿⣿⡇⠀⠀
+// ⠀⠀⠀⠀⠀⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⣿⣿⣇⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣿⣿⣗⠀⠀⠀⠀⠀⠀⢠⣿⣿⣇⠀⠀
+// ⠀⠀⠀⠀⠀⣿⣿⣿⡆⠀⠀⠀⠀⠀⢺⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡧⠀⠀⠀⠀⠀⠀⢺⣿⣿⣯⠀⠀
+// ⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀
+// ⠀⠀⠀⠀⠀⠀⠀⠈⠉⠉⠉⠉⠉⠉⠙⣿⣿⣿⣿⣿⣿⣿⡃⠀⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣏⠉⠉⠉⠉⠉⠉⠉⠁⠀⠀⠀⠀
+// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⠅⠀⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
+// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⠃⠀⢨⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
+// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⠃⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
+// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⡃⠀⠸⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
+// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⠆⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
+// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⠅⠀⢘⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
+// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣄⣀⣀⣀⣀⣿⣿⣿⣿⣿⣿⣿⠆⠀⠸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⣀⣀⣀⣀⣀⠀⠀⠀⠀⠀⠀⠀
+// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠆⠀⢘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀
+
+void cleanup() { tcsetattr(1, TCSAFLUSH, &ttysave); }
+
+void DG_Init() {
+
+  // open needed files
+
+  fbfd = openordie("/dev/fb0", O_WRONLY, 0);
+  // no need for now
+  kbfd = openordie("/dev/keyboard", O_RDONLY | O_NONBLOCK, 0);
+
+  // get needed fb info
+
+  ioctlordie(fbfd, FBIOGET_VSCREENINFO, &fbvs);
+  ioctlordie(fbfd, FBIOGET_FSCREENINFO, &fbfs);
+  if (fbfs.line_length == 0) {
+    fprintf(stderr, "WTFFFF\r\n");
+    exit(-1);
+  }
+
+  // make tty raw and nonblocking
+
+  struct termios tty;
+
+  tcgetattr(1, &tty);
+  ttysave = tty;
+  cfmakeraw(&tty);
+  tty.c_cc[VMIN] = 0;
+  tcsetattr(1, TCSAFLUSH, &tty);
+  atexit(cleanup);
+
+  char a[100];
+  while (read(kbfd, a, 100))
+    ;
+}
+
+void DG_DrawFrame() {
+  // prepare the frame for writing
+
+  // TODO handle bpp stuff
+  off_t moffset =
+      fbfs.line_length * (fbvs.yres / 2 - DOOMGENERIC_RESY / 2) +
+      (fbvs.xres / 2 - DOOMGENERIC_RESX / 2) * (fbvs.bits_per_pixel / 8);
+  for (uintmax_t y = 0; y < DOOMGENERIC_RESY; ++y) {
+    uintptr_t foffset = 0;
+    foffset = fbfs.line_length * y;
+    seekordie(fbfd, moffset + fbfs.line_length * y, SEEK_SET);
+    uint32_t *pixel = DG_ScreenBuffer + DOOMGENERIC_RESX * y;
+    
+    writeordie(fbfd, DG_ScreenBuffer + DOOMGENERIC_RESX * y,
+               DOOMGENERIC_RESX * 4);
+  }
+}
+enum ps2_scancode {
+    PS2_SC_INVALID,
+    PS2_SC_F9,
+    PS2_SC_F5,
+    PS2_SC_F3,
+    PS2_SC_F1,
+    PS2_SC_F2,
+    PS2_SC_F12,
+    PS2_SC_F10,
+    PS2_SC_F8,
+    PS2_SC_F6,
+    PS2_SC_F4,
+
+    PS2_SC_TAB,
+    PS2_SC_BACKTICK,    // `
+    PS2_SC_LEFT_ALT,
+    PS2_SC_LEFT_SHIFT,
+    PS2_SC_LEFT_CTRL,
+
+    PS2_SC_Q,
+    PS2_SC_1,
+    PS2_SC_Z,
+    PS2_SC_S,
+    PS2_SC_A,
+    PS2_SC_W,
+    PS2_SC_2,
+    PS2_SC_C,
+    PS2_SC_X,
+    PS2_SC_D,
+    PS2_SC_E,
+    PS2_SC_4,
+    PS2_SC_3,
+
+    PS2_SC_SPACE,
+    PS2_SC_V,
+    PS2_SC_F,
+    PS2_SC_T,
+    PS2_SC_R,
+    PS2_SC_5,
+    PS2_SC_N,
+    PS2_SC_B,
+    PS2_SC_H,
+    PS2_SC_G,
+    PS2_SC_Y,
+    PS2_SC_6,
+    PS2_SC_M,
+    PS2_SC_J,
+    PS2_SC_U,
+    PS2_SC_7,
+    PS2_SC_8,
+
+    PS2_SC_COMMA,       // ,
+    PS2_SC_K,
+    PS2_SC_I,
+    PS2_SC_O,
+    PS2_SC_0,
+    PS2_SC_9,
+    PS2_SC_DOT,         // .
+    PS2_SC_SLASH,       // /
+    PS2_SC_L,
+    PS2_SC_SEMICOLON,   // ;
+    PS2_SC_P,
+    PS2_SC_MINUS,       // -
+    PS2_SC_APOSTROPHE,  // '
+    PS2_SC_LBRACKET,    // [
+    PS2_SC_EQUAL,       // =
+
+    PS2_SC_CAPSLOCK,
+    PS2_SC_RIGHT_SHIFT,
+    PS2_SC_ENTER,
+    PS2_SC_RBRACKET,    // ]
+    PS2_SC_BACKSLASH,   // 
+
+    PS2_SC_BACKSPACE,
+
+    PS2_SC_KP_1,
+    PS2_SC_KP_4,
+    PS2_SC_KP_7,
+    PS2_SC_KP_0,
+    PS2_SC_KP_DOT,
+    PS2_SC_KP_2,
+    PS2_SC_KP_5,
+    PS2_SC_KP_6,
+    PS2_SC_KP_8,
+
+    PS2_SC_ESC,
+    PS2_SC_NUMLOCK,
+    PS2_SC_F11,
+    PS2_SC_KP_PLUS,
+    PS2_SC_KP_3,
+    PS2_SC_KP_MINUS,
+    PS2_SC_KP_ASTERISK,
+    PS2_SC_KP_9,
+    PS2_SC_SCROLLLOCK,
+    PS2_SC_F7,
+
+    PS2_SC_E0_WWW_SEARCH,
+    PS2_SC_E0_RIGHT_ALT,
+    PS2_SC_E0_RIGHT_CTRL,
+    PS2_SC_E0_PREV_TRACK,
+    PS2_SC_E0_WWW_FAV,
+    PS2_SC_E0_LEFT_GUI,
+    PS2_SC_E0_WWW_REFRESH,
+    PS2_SC_E0_VOL_DOWN,
+    PS2_SC_E0_MUTE,
+    PS2_SC_E0_RIGHT_GUI,
+    PS2_SC_E0_WWW_STOP,
+    PS2_SC_E0_CALCULATOR,
+    PS2_SC_E0_APPS,
+    PS2_SC_E0_WWW_FORWARD,
+    PS2_SC_E0_VOL_UP,
+    PS2_SC_E0_PLAY_PAUSE,
+    PS2_SC_E0_POWER,
+    PS2_SC_E0_WWW_BACK,
+    PS2_SC_E0_WWW_HOME,
+    PS2_SC_E0_STOP,
+    PS2_SC_E0_SLEEP,
+    PS2_SC_E0_MY_COMPUTER,
+    PS2_SC_E0_EMAIL,
+    PS2_SC_E0_KP_SLASH,
+    PS2_SC_E0_NEXT_TRACK,
+    PS2_SC_E0_MEDIA_SELECT,
+    PS2_SC_E0_KP_ENTER,
+    PS2_SC_E0_WAKE,
+    PS2_SC_E0_END,
+    PS2_SC_E0_LEFT_ARROW,
+    PS2_SC_E0_HOME,
+    PS2_SC_E0_INSERT,
+    PS2_SC_E0_DELETE,
+    PS2_SC_E0_DOWN_ARROW,
+    PS2_SC_E0_RIGHT_ARROW,
+    PS2_SC_E0_UP_ARROW,
+    PS2_SC_E0_PAGE_DOWN,
+    PS2_SC_E0_PAGE_UP,
+    PS2_SC_E0_PRINT_SCREEN,
+
+    PS2_SC_E1_PAUSE,
+
+};
+enum ps2flags {
+    PRESSED,
+    RELEASED,
+    EXTENDEDKEYRELEASED,
+    EXTENDEDKEYPRESSED,
+};
+typedef struct {
+    char ascii;
+    enum ps2_scancode keycode;
+    enum ps2flags flags;
+} nyauxps2kbdpacket;
+
+
+#define KEYCODE_A 30
+#define KEYCODE_S 31
+#define KEYCODE_D 32
+#define KEYCODE_W 17
+#define KEYCODE_LEFTCTRL 29
+#define KEYCODE_ENTER 28
+#define KEYCODE_ESCAPE 1
+#define KEYCODE_RIGHTSHIFT 54
+#define KEYCODE_LEFTSHIFT 42
+#define KEYCODE_SPACE 57
+#define KEYCODE_RIGHTCTRL 97
+#define KBPACKET_FLAGS_RELEASED 1
+
+int DG_GetKey(int *pressed, unsigned char *doomkey) {
+  nyauxps2kbdpacket buff;
+  if (readordie(kbfd, &buff, sizeof(nyauxps2kbdpacket)) == 0) {
+    fprintf(stderr, "nuh uh!\r\n");
+    return 0;
+  }
+
+  char key;
+  switch (buff.keycode) {
+  case PS2_SC_A:
+    key = KEY_LEFTARROW;
+    break;
+  case PS2_SC_W:
+    key = KEY_UPARROW;
+    break;
+  case PS2_SC_S:
+    key = KEY_DOWNARROW;
+    break;
+  case PS2_SC_D:
+    key = KEY_RIGHTARROW;
+    break;
+  case PS2_SC_ENTER:
+    key = KEY_ENTER;
+    break; 
+  case PS2_SC_SPACE:
+    key = KEY_USE;
+    break;
+  case PS2_SC_LEFT_CTRL:
+    key = KEY_FIRE;
+    break;
+  default:
+    key = buff.ascii;
+    break;
+  }
+
+  *doomkey = key;
+  if (buff.flags != EXTENDEDKEYPRESSED && buff.flags != EXTENDEDKEYPRESSED)
+    *pressed = buff.flags & RELEASED ? 0 : 1;
+  else
+    *pressed = buff.flags & EXTENDEDKEYRELEASED ? 0 : 1;
+  return 1;
+}
+
+void DG_SleepMs(uint32_t ms) {
+  // usleep(ms * 1000);
+}
+
+uint32_t DG_GetTicksMs() {
+  struct timespec time;
+
+  clock_gettime(0, &time);
+
+  return time.tv_sec * 1000 + time.tv_nsec / 1000000;
+}
+
+void DG_SetWindowTitle(const char *title) {}
diff -urN --no-dereference doomgeneric-clean/doomgeneric/i_system.c doomgeneric-workdir/doomgeneric/i_system.c
--- doomgeneric-clean/doomgeneric/i_system.c
+++ doomgeneric-workdir/doomgeneric/i_system.c
@@ -459,6 +459,8 @@
     SDL_Quit();
 
     exit(-1);
+#elif __nyaux__
+    exit(-1);
 #else
     while (true)
     {
diff -urN --no-dereference doomgeneric-clean/doomgeneric/i_video.c doomgeneric-workdir/doomgeneric/i_video.c
--- doomgeneric-clean/doomgeneric/i_video.c
+++ doomgeneric-workdir/doomgeneric/i_video.c
@@ -188,12 +188,12 @@
 	s_Fb.blue.length = 8;
 	s_Fb.green.length = 8;
 	s_Fb.red.length = 8;
-	s_Fb.transp.length = 8;
+	s_Fb.transp.length = 0;
 
 	s_Fb.blue.offset = 0;
 	s_Fb.green.offset = 8;
 	s_Fb.red.offset = 16;
-	s_Fb.transp.offset = 24;
+	s_Fb.transp.offset = 0;
 	
 
     printf("I_InitGraphics: framebuffer: x_res: %d, y_res: %d, x_virtual: %d, y_virtual: %d, bpp: %d\n",
diff -urN --no-dereference doomgeneric-clean/doomgeneric/i_video.h doomgeneric-workdir/doomgeneric/i_video.h
--- doomgeneric-clean/doomgeneric/i_video.h
+++ doomgeneric-workdir/doomgeneric/i_video.h
@@ -136,6 +136,8 @@
 
 void I_EnableLoadingDisk(void);
 
+void I_EndRead(void);
+
 extern char *video_driver;
 extern boolean screenvisible;
 
